{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# THM - Cryptography Excercises and work\n\n1. Work for thmes , math and related ","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"# SexyPanties\nfrom rich import print as rprint # For rprinting\nfrom rich.pretty import pprint # For pretty printing\nfrom rich import inspect # For inspect\nfrom rich.console import Console # For console.print\nfrom rich.markdown import Markdown # For markdow\nfrom rich.panel import Panel # For Panel()\nfrom rich import box # For Panel Boxes\nfrom rich.prompt import Prompt # For Prompting \nfrom rich.style import Style # For styles colors\nfrom rich.text import Text # For text Styles\nconsole = Console() # Standard code to access console\nfrom rich.traceback import install\ninstall(show_locals=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T05:53:23.340574Z","iopub.execute_input":"2024-12-18T05:53:23.340951Z","iopub.status.idle":"2024-12-18T05:53:23.486326Z","shell.execute_reply.started":"2024-12-18T05:53:23.340918Z","shell.execute_reply":"2024-12-18T05:53:23.485029Z"}},"outputs":[{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"<bound method InteractiveShell.excepthook of <ipykernel.zmqshell.ZMQInteractiveShell object at 0x79118c254610>>"},"metadata":{}}],"execution_count":1},{"cell_type":"code","source":"# Python test codes \n\nrprint('Smelly Pantys')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T05:53:23.488680Z","iopub.execute_input":"2024-12-18T05:53:23.489149Z","iopub.status.idle":"2024-12-18T05:53:23.500463Z","shell.execute_reply.started":"2024-12-18T05:53:23.489097Z","shell.execute_reply":"2024-12-18T05:53:23.499147Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Smelly Pantys\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Smelly Pantys\n</pre>\n"},"metadata":{}}],"execution_count":2},{"cell_type":"markdown","source":"#  Code Testing will be done here ","metadata":{}},{"cell_type":"code","source":"# Section is for doing some opertaions on prime numbers \n\nfrom sympy import isprime, primerange\n\n# Check primality of a number\nif isprime(17):\n    print(\"17 is a prime number\")\n\n# Generate prime numbers in a range\nprimes = list(primerange(10, 30))\nrprint(primes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T05:53:23.501903Z","iopub.execute_input":"2024-12-18T05:53:23.502278Z","iopub.status.idle":"2024-12-18T05:53:23.912334Z","shell.execute_reply.started":"2024-12-18T05:53:23.502229Z","shell.execute_reply":"2024-12-18T05:53:23.911077Z"}},"outputs":[{"name":"stdout","text":"17 is a prime number\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1m[\u001b[0m\u001b[1;36m11\u001b[0m, \u001b[1;36m13\u001b[0m, \u001b[1;36m17\u001b[0m, \u001b[1;36m19\u001b[0m, \u001b[1;36m23\u001b[0m, \u001b[1;36m29\u001b[0m\u001b[1m]\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">11</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">13</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">19</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">23</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">29</span><span style=\"font-weight: bold\">]</span>\n</pre>\n"},"metadata":{}}],"execution_count":3},{"cell_type":"markdown","source":"## Python Packages for cryptography \n\n1. https://cryptography.io/en/latest/ - Suggested by gemini for modern cryptgraphy","metadata":{}},{"cell_type":"code","source":"!pip install cryptography -q","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T05:53:23.914584Z","iopub.execute_input":"2024-12-18T05:53:23.915052Z","iopub.status.idle":"2024-12-18T05:53:35.844925Z","shell.execute_reply.started":"2024-12-18T05:53:23.915016Z","shell.execute_reply":"2024-12-18T05:53:35.843326Z"}},"outputs":[],"execution_count":4},{"cell_type":"markdown","source":"### Testing RSA Algo \n1. This was part of the stuff you are studying ","metadata":{}},{"cell_type":"code","source":"# Running operations with cryptography package\n\nfrom cryptography.hazmat.primitives.asymmetric import rsa\n\ndef r1():\n    private_key = rsa.generate_private_key(\n\n    public_exponent=65537,\n\n    key_size=2048,\n        )\n\n    private_numbers = private_key.private_numbers()\n    rprint(private_key)\n    rprint(f'P Number = {private_numbers.p}')\n    rprint(f'Q Number = {private_numbers.q}')\n    rprint(f'D Number = {private_numbers.d}')\n    # inspect(private_key, all=True)\n\n# Execution zone \nr1()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T05:53:35.846868Z","iopub.execute_input":"2024-12-18T05:53:35.847357Z","iopub.status.idle":"2024-12-18T05:53:36.013364Z","shell.execute_reply.started":"2024-12-18T05:53:35.847300Z","shell.execute_reply":"2024-12-18T05:53:36.012347Z"},"scrolled":true},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1m<\u001b[0m\u001b[1;95mcryptography.hazmat.bindings._rust.openssl.rsa.RSAPrivateKey\u001b[0m\u001b[39m object at \u001b[0m\u001b[1;36m0x79115d79ff30\u001b[0m\u001b[1m>\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">&lt;</span><span style=\"color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold\">cryptography.hazmat.bindings._rust.openssl.rsa.RSAPrivateKey</span><span style=\"color: #000000; text-decoration-color: #000000\"> object at </span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0x79115d79ff30</span><span style=\"font-weight: bold\">&gt;</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"P Number = \n\u001b[1;36m1643421396549339930195203772381535573269845293336558210552595164055452326485935359087540348174328740036184868542529\u001b[0m\n\u001b[1;36m8906441255456230322462874987536740488691228344385597715259302235022752643879251417205068983359645165932506980701931\u001b[0m\n\u001b[1;36m9792098122968066566002332892232938911292657244663584008913682703307625777260649\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">P Number = \n<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1643421396549339930195203772381535573269845293336558210552595164055452326485935359087540348174328740036184868542529</span>\n<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">8906441255456230322462874987536740488691228344385597715259302235022752643879251417205068983359645165932506980701931</span>\n<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">9792098122968066566002332892232938911292657244663584008913682703307625777260649</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Q Number = \n\u001b[1;36m1398936293368466559252843553161381161401233680815500609906684095095906391926971377581550965314891742125689812980914\u001b[0m\n\u001b[1;36m5498894994545501280484125745304797343292480673349470810405459189143429778875591959127133021097302921092900641486713\u001b[0m\n\u001b[1;36m2030400227468657638592887351677112691555784714336216659403020568348480704581273\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Q Number = \n<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1398936293368466559252843553161381161401233680815500609906684095095906391926971377581550965314891742125689812980914</span>\n<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5498894994545501280484125745304797343292480673349470810405459189143429778875591959127133021097302921092900641486713</span>\n<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2030400227468657638592887351677112691555784714336216659403020568348480704581273</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"D Number = \n\u001b[1;36m2767816667437763629882800809414392092854275469286860714418771417063034856104364012899627540472326755691611689423258\u001b[0m\n\u001b[1;36m6821078000356778890137524637087564740949971058816433059098248930616450827246623233292297748915723460959741896065965\u001b[0m\n\u001b[1;36m8762343042696135162543866770988806796685888877855296813439059119673237067841135801394364273012286316429864998917266\u001b[0m\n\u001b[1;36m1561028802632352725155653591687944836199522529610065326758673434986305699279162975806288846484226552835151326397304\u001b[0m\n\u001b[1;36m8608272009371676561901567555704719143303052144308399614308132121714405440374493885907216287773846440757031336445456\u001b[0m\n\u001b[1;36m3813881268378986897079549840444911091905\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">D Number = \n<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2767816667437763629882800809414392092854275469286860714418771417063034856104364012899627540472326755691611689423258</span>\n<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6821078000356778890137524637087564740949971058816433059098248930616450827246623233292297748915723460959741896065965</span>\n<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">8762343042696135162543866770988806796685888877855296813439059119673237067841135801394364273012286316429864998917266</span>\n<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1561028802632352725155653591687944836199522529610065326758673434986305699279162975806288846484226552835151326397304</span>\n<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">8608272009371676561901567555704719143303052144308399614308132121714405440374493885907216287773846440757031336445456</span>\n<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3813881268378986897079549840444911091905</span>\n</pre>\n"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"# EXcercise Maths\n\nrprint(4391 * 6659)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T05:53:36.014752Z","iopub.execute_input":"2024-12-18T05:53:36.015328Z","iopub.status.idle":"2024-12-18T05:53:36.022769Z","shell.execute_reply.started":"2024-12-18T05:53:36.015292Z","shell.execute_reply":"2024-12-18T05:53:36.021645Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1;36m29239669\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">29239669</span>\n</pre>\n"},"metadata":{}}],"execution_count":6},{"cell_type":"markdown","source":"## RSA Related math question \n\nFormula \n\n$$\n\\phi(n) = n - p - q + 1\n$$\n\n$\nUsing above equation for the problem \n\n- Below one is good\n","metadata":{}},{"cell_type":"code","source":"## Operation \n\np1 = 4391\nq1 = 6659\nn1 = p1*q1\n\nphipa = (n1-p1-q1+1)\nrprint(phipa)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T05:53:36.024033Z","iopub.execute_input":"2024-12-18T05:53:36.024362Z","iopub.status.idle":"2024-12-18T05:53:36.036080Z","shell.execute_reply.started":"2024-12-18T05:53:36.024329Z","shell.execute_reply":"2024-12-18T05:53:36.034817Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1;36m29228620\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">29228620</span>\n</pre>\n"},"metadata":{}}],"execution_count":7},{"cell_type":"markdown","source":"# Diffie-Hellman Key Exchange \n\n1. This section will have the work being done for this algo\n\n\nFormula For the key exchange calculation\n- Formula writtenin a confusing way\n\n\n$$ \nA = g^a mod  p\n$$\n","metadata":{}},{"cell_type":"code","source":"# Using the formula \n\ndef secretA(p,g,a):\n    Asec = pow(g,a,p)\n    return Asec\n\nAlice = secretA(29,5,12)\nBob = secretA(29,5,17)\n\nrprint(f'AliceA = {Alice}')\nrprint(f'BobA = {Bob}')\n\n# Second Questions \n\ndef AliceBob(p,a,k):\n    key = pow(k,a, p)\n    return key\n\nBobKey = AliceBob(29,12, Bob)\nAliceKey = AliceBob(29,17, Alice)\n\nrprint(f'''\n\nBobKey = {BobKey}\nAliceKey = {AliceKey}\n'''\n      )\n\n","metadata":{"trusted":true,"scrolled":true,"execution":{"iopub.status.busy":"2024-12-18T05:53:36.037524Z","iopub.execute_input":"2024-12-18T05:53:36.037999Z","iopub.status.idle":"2024-12-18T05:53:36.058638Z","shell.execute_reply.started":"2024-12-18T05:53:36.037950Z","shell.execute_reply":"2024-12-18T05:53:36.057303Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"AliceA = \u001b[1;36m7\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">AliceA = <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"BobA = \u001b[1;36m9\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">BobA = <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">9</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\n\nBobKey = \u001b[1;36m24\u001b[0m\nAliceKey = \u001b[1;36m24\u001b[0m\n\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n\nBobKey = <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">24</span>\nAliceKey = <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">24</span>\n\n</pre>\n"},"metadata":{}}],"execution_count":8},{"cell_type":"markdown","source":"# Testing ED2519 \n\nThis is used for making the github keys ","metadata":{}},{"cell_type":"code","source":"# Example directly takem \n\nfrom cryptography.hazmat.primitives.asymmetric.ed25519 import Ed25519PrivateKey\n\nprivate_key = Ed25519PrivateKey.generate()\n\nsignature = private_key.sign(b\"my authenticated message\")\n\npublic_key = private_key.public_key()\n\n# Raises InvalidSignature if verification fails\n\npublic_key.verify(signature, b\"my authenticated message\")\n\n# Ur work from here \n\n#   Printing the raw bytes of the keys\n\nrprint(f'''\n\nPrivate Key = {private_key.private_bytes_raw()}\nPublic_Key = {public_key.public_bytes_raw()}\n''')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T05:59:08.502103Z","iopub.execute_input":"2024-12-18T05:59:08.503207Z","iopub.status.idle":"2024-12-18T05:59:08.511982Z","shell.execute_reply.started":"2024-12-18T05:59:08.503165Z","shell.execute_reply":"2024-12-18T05:59:08.510927Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\n\nPrivate Key = \u001b[32mb'\\x8f\\x9e\\x91W>\\x0b\\xa6\\x02\\xdb\\x8d\\xb6L\\xe6\\x9b\\xe6\\xcc\\x913\\x84\\x81\\xeb\\xf2qe>\\xf7Fecz\\\\b'\u001b[0m\nPublic_Key = \u001b[32mb'\\n\\'\\x0b\\xaf\\xc2\\xf3\\xcb\\xc9\\x84V\\xc8\\x9d2%\\x7f\\x9e\\xec\\x00\\\\\\xec~\\xf0\\xb7\\xdc\\x8bx\\x83\"t\\t\\x9f-'\u001b[0m\n\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n\nPrivate Key = <span style=\"color: #008000; text-decoration-color: #008000\">b'\\x8f\\x9e\\x91W&gt;\\x0b\\xa6\\x02\\xdb\\x8d\\xb6L\\xe6\\x9b\\xe6\\xcc\\x913\\x84\\x81\\xeb\\xf2qe&gt;\\xf7Fecz\\\\b'</span>\nPublic_Key = <span style=\"color: #008000; text-decoration-color: #008000\">b'\\n\\'\\x0b\\xaf\\xc2\\xf3\\xcb\\xc9\\x84V\\xc8\\x9d2%\\x7f\\x9e\\xec\\x00\\\\\\xec~\\xf0\\xb7\\xdc\\x8bx\\x83\"t\\t\\x9f-'</span>\n\n</pre>\n"},"metadata":{}}],"execution_count":17}]}